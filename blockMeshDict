/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
|  \\    /   O peration     | Website:  https://openfoam.org
|   \\  /    A nd           | Version:  10
|    \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
        #include "cmath"
        #include "OFstream.H"

    #};

    code
    #{
	scalar r = 5.0; 	//radius of the cylinder
	scalar x_max = 100.0; 	//x domain length
	scalar x_min = -x_max;	
	scalar y_min = -75; 	//y domain length
	scalar y_max = 25;
	scalar z_max = 0.5;	//z domain length
	
	scalar cos45 = std::cos(M_PI/4);
	scalar sin45 = cos45;
	
	scalar rcos45 = r*cos45;
	scalar rsin45 = rcos45;

        pointField points(16);
        points[0]  = point(rcos45, -rsin45, z_max);
        points[1]  = point(x_max, -rsin45, z_max);
        points[2]  = point(x_max, rsin45, z_max);
        points[3]  = point(rcos45, rsin45, z_max);
        points[4]  = point(x_max, y_max, z_max);
        points[5]  = point(rcos45, y_max, z_max);
        points[6]  = point(-rcos45, y_max, z_max);
        points[7]  = point(-rcos45, rsin45, z_max);
        points[8]  = point(x_min, y_max, z_max);
        points[9]  = point(x_min, rsin45, z_max);
        points[10] = point(x_min, -rsin45, z_max);
        points[11] = point(x_min, y_min, z_max);
        points[12] = point(-rcos45, y_min, z_max);
        points[13] = point(-rcos45, -rsin45, z_max);
        points[14] = point(rcos45, y_min, z_max);
        points[15] = point(x_max, y_min, z_max);


        // Duplicate z points
        label sz = points.size();
        points.setSize(2 * sz);
        for (label i = 0; i < sz; i++)
        {
            const point& pt = points[i];
            points[i + sz] = point(pt.x(), pt.y(), -pt.z());
        }

        os << points;
	
	scalar cos22p5 = std::cos(M_PI/8);
	scalar sin22p5 = std::sin(M_PI/8);
	scalar cos67p5 = std::cos(3*M_PI/8);
	scalar sin67p5 = std::sin(3*M_PI/8);
	scalar scale = 1;//0.82;
	
        // Generate arc definitions
        Foam::OFstream arcFile("system/arcs");
        arcFile << "edges\n(\n";
        arcFile << "    arc 0  3   (" << r << " " << 0 << " " << z_max << ")\n";
        arcFile << "    arc 3  7   (" << 0 << " " << r << " " << z_max << ")\n";
        arcFile << "    arc 7  13  (" << -r << " " << 0 << " " << z_max << ")\n";
        arcFile << "    arc 13 0   (" << 0 << " " << -r << " " << z_max << ")\n";
        arcFile << "    arc 16 19  (" << r << " " << 0 << " " << z_max << ")\n";
        arcFile << "    arc 19 23  (" << 0 << " " << r << " " << z_max << ")\n";
        arcFile << "    arc 23 19  (" << -r << " " << 0 << " " << z_max << ")\n";
        arcFile << "    arc 19 16  (" << 0 << " " << -r << " " << z_max << ")\n";
        arcFile << ");\n";
    #};
};

    xclose	30;//180;
    xfar	200;//180;
    ywater	30;
    ydeep	15; 
    yair	30;

blocks
(
    hex (0 1 2 3 16 17 18 19) ($xfar $ywater 1) simpleGrading (1 1 1) 
    hex (3 2 4 5 19 18 20 21) ($xfar $yair 1) simpleGrading (1 1 1)
    hex (7 3 5 6 23 19 21 22) ($xclose $yair 1) simpleGrading (1 1 1)
    hex (9 7 6 8 25 23 22 24) ($xfar $yair 1) simpleGrading (1 1 1)
    hex (10 13 7 9 26 29 23 25) ($xfar $ywater 1) simpleGrading (1 1 1)
    hex (11 12 13 10 27 28 29 26) ($xfar $ydeep 1) simpleGrading (1 1 1)    
    hex (12 14 0 13 28 30 16 29) ($xclose $xdeep 1) simpleGrading (1 1 1)
    hex (14 15 1 0 30 31 17 16) ($xfar $ydeep 1) simpleGrading (1 1 1)


#include "arcs"

boundary
(
    front
    {
	type empty;
	faces
	(
	    (11 12 13 10)
	    (12 14 0  13)
	    (14 15 1  0 )
	    (10 13 7  9 )
	    (0  1  2  3 )
	    (3  2  4  5 )
	    (7  3  5  6 )
	    (9  7  6  8 )
	)
    }
    back
    {
	 type empty;
	 faces
	 (
	    (27 28 29 26)
	    (28 30 16 29)
	    (30 31 17 16)
	    (26 29 23 25)
	    (16 17 18 19)
	    (19 18 20 21)
	    (23 19 21 22)
	    (25 23 22 24)
	 );
    }
    bottom
    {
        type wall;
        faces
        (
            (11 12 27 28)
            (12 14 28 30)
            (14 15 30 31)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (15 1 17 31)
            (1  2 17 18)
            (2  4 20 18)
        );
    }
    atmosphere
    {
        type patch;
        faces
        (
            (4  5  21 20)
            (5  6  21 22)
            (6  8  22 24)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (11 27 26 10)
            (10 26 25 9 )
            (9  25 24 8 )
        );
    }
    floatingObj
    {
        type wall;
        faces
        (
            (0  16 3  19)
            (7  3  19 23)
            (13 7  29 19)
            (0  13 16 29)
        );
    }
);

mergePatchPairs
(
);
// ************************************************************************* //
