/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;
xmin 0;
xmax 1200;
ymin 0;
ymax 95;
zmin -0.1;
zmax 0.1;

/* below variables assume the origin of yy at calm water surface level

Number in the name of the variables symbolize the block which they belong:
    
    Block0 (lower coarser mesh)
    Block1 (lower transitional mesh)
    Block2 (fluid interface fine mesh)
    Block3 (Upper transiontional mesh)
    Block4 (Upper coarse mesh)
*/

ymin0 -75;
ymax0 -11;

ymin1 $ymax0;
ymax1 -0.5; // defines size of fine mesh (ex: -2 ---> from -2m to 2m == 4m)

ymin2 $ymax1;
ymax2 #calc "-1 * $ymax1";

ymin3 $ymax2;
ymax3 #calc "-1 * $ymin1";

ymin4 $ymax3;
ymax4 #calc "$ymax + $ymin0";


// Mesh sizes (ms) per block
ms0 0.50;    //coarse
ms1 0.50;    //medium
ms2 0.50;    //fine  
ms3 $ms1;   //medium
ms4 $ms0;   //coarse

// ## Cells per block
// if block2 is from ymin2=-2 to ymax2=2, block2=4m height, and ms2=0.25 then ys2=4/0.25=16 cells

xs0 #calc "round(($xmax / $ms0))";
ys0 #calc "round((($ymax0 - $ymin0) / $ms0))";
zs0 1; 
xs1 #calc "round(($xmax / $ms1))";
ys1 #calc "round((($ymax1 - $ymin1) / $ms1))";
zs1 1; 
xs2 #calc "round(($xmax / $ms2))";
ys2 #calc "round((($ymax2 - $ymin2) / $ms2))";
zs2 1; 
xs3 #calc "round(($xmax / $ms3))";
ys3 #calc "round((($ymax3 - $ymin3) / $ms3))";
zs3 1;
xs4 #calc "round(($xmax / $ms4))";
ys4 #calc "round((($ymax4 - $ymin4) / $ms4))"; 
zs4 1;


vertices
(
//Block0 (lower coarser mesh)
    ($xmin $ymin0 $zmin) // 0
    ($xmax $ymin0 $zmin) // 1
    ($xmin $ymax0 $zmin) // 2
    ($xmax $ymax0 $zmin) // 3 

    ($xmin $ymin0 $zmax) // 4
    ($xmax $ymin0 $zmax) // 5
    ($xmin $ymax0 $zmax) // 6
    ($xmax $ymax0 $zmax) // 7 

//Block1 (lower transitional mesh)
    ($xmin $ymin1 $zmin) // 8
    ($xmax $ymin1 $zmin) // 9
    ($xmin $ymax1 $zmin) // 10
    ($xmax $ymax1 $zmin) // 11

    ($xmin $ymin1 $zmax) // 12
    ($xmax $ymin1 $zmax) // 13
    ($xmin $ymax1 $zmax) // 14
    ($xmax $ymax1 $zmax) // 15

//Block2 (fluid interface fine mesh)
    ($xmin $ymin2 $zmin) // 16
    ($xmax $ymin2 $zmin) // 17
    ($xmin $ymax2 $zmin) // 18
    ($xmax $ymax2 $zmin) // 19

    ($xmin $ymin2 $zmax) // 20
    ($xmax $ymin2 $zmax) // 21
    ($xmin $ymax2 $zmax) // 22
    ($xmax $ymax2 $zmax) // 23

//Block3 (Upper transiontional mesh)
    ($xmin $ymin3 $zmin) // 24
    ($xmax $ymin3 $zmin) // 25
    ($xmin $ymax3 $zmin) // 26
    ($xmax $ymax3 $zmin) // 27

    ($xmin $ymin3 $zmax) // 28
    ($xmax $ymin3 $zmax) // 29
    ($xmin $ymax3 $zmax) // 30
    ($xmax $ymax3 $zmax) // 31

//Block4 (Upper coarse mesh)
    ($xmin $ymin4 $zmin) // 32
    ($xmax $ymin4 $zmin) // 33
    ($xmin $ymax4 $zmin) // 34
    ($xmax $ymax4 $zmin) // 35

    ($xmin $ymin4 $zmax) // 36
    ($xmax $ymin4 $zmax) // 37
    ($xmin $ymax4 $zmax) // 38
    ($xmax $ymax4 $zmax) // 39
);

blocks          
(
    hex (0  1  3  2  4  5  7  6 )   block0 ( $xs0 $ys0 $zs0 )    simpleGrading (1 1 1) // Lower Coarse Mesh
    hex (8  9  11 10 12 13 15 14)   block1 ( $xs1 $ys1 $zs1 )    simpleGrading (1 1 1) // Lower Transition Mesh
    hex (16 17 19 18 20 21 23 22)   block2 ( $xs2 $ys2 $zs2 )    simpleGrading (1 1 1) // Fine Mesh
    hex (24 25 27 26 28 29 31 30)   block3 ( $xs3 $ys3 $zs3 )    simpleGrading (1 1 1) // Upper Transition Mesh
    hex (32 33 35 34 36 37 39 38)   block4 ( $xs4 $ys4 $zs4 )    simpleGrading (1 1 1) // Upper Coarse Mesh
);

edges           
(
);

boundary
(
	inlet
	{
		type	patch;
		faces	
            (
			(0  4  6  2 )
			(8  12 14 10)
			(16 20 22 18)
			(24 28 30 26)
			(32 36 38 34)	
			);
	}
	
	outlet
	{
		type	patch;
		faces
        	(
			(1  5  7  3 )
			(9  13 15 11)
			(17 21 23 19)
			(25 29 31 27)
			(33 37 39 35)		
			);
	}

	bottom
	{
		type	wall;
		faces	((0 4 5 1));
	}

	atmosphere
	{
		type	patch;
		faces	((34 38 39 35));
	}

	back
	{
		type	patch;
		faces	
            (
			(0  2  3  1 )
			(8  10 11 9 )
			(16 18 19 17)
			(24 26 27 25)
			(32 34 35 33)
			);
	}

	front
	{
		type	patch;
		faces
        	(
			(4  5  7  6 )
			(12 13 15 14)
			(20 21 23 22)
			(28 29 31 30)
			(36 37 39 38)	
			);
	}
    
    interface01
    {
        type    patch;
        faces   ((3  2  6  7 ));
    }
    
    interface10
    {
        type    patch;
        faces   ((8  9  13 12));
    }
    
    interface12
    {
        type    patch;
        faces   ((11 10 14 15));
    }
    
    interface21
    {
        type    patch;
        faces   ((16 17 21 20));
    }
    
    interface23   
    {
        type    patch;
        faces   ((19 18 22 23));
    }
    
    interface32
    {
        type    patch;
        faces   ((24 25 29 28));
    }

    interface34
    {
        type    patch;
        faces   ((27 26 30 31));
    }

    interface43
    {
        type    patch;
        faces   ((32 33 37 36));
    }

);

mergePatchPairs
(
    (interface01 interface10)
    (interface12 interface21)
    (interface32 interface23)
    (interface43 interface34)

);

// ************************************************************************* //
